====================================================================================================================================================================================

1/2/18

AIM: Socket to me

Socket
- A connection between two programs over a network.
- A socket corresponds to an IP (internet protocol) address/port pair.
- To use a socket:
	 1. Create the socket
	 2. Bind it to an address and port
	 3. Listen/Initiate a connection
	 4. Send/Receive data

IP Addresses
- All devices connected to the internet have an IP address.
- IP addresses come in two flavors, IPv4 and IPv6.
	- IPv4 is main standard, IPv6 is better though.
- Addresses are allocated in blocks to make routing easier.
	IPv4: 4-byte addresses of the form:
		[0-255].[0-255].[0-255].[0-255]
		- Each group is called an octet
		- At most, there are 2^32, or ~4.3 billion IPv4 addresses
	IPv6: 16-byte addresses of the form:
		[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]:[0-ffff]
		- Each group is known as a hextet (not as standard as octet)
		- Leading 0s are ignored
		- Any number of consecutive all 0 hextets can be replaced with ::
			0000:0000:0000:0000:004f:13c2:0009:a2d2 == ::4f:13c2:9:a2d2
		- IPv4 addresses can be represented as 5 0-hextets, 1 ffff hextet, and the IPv4 addresses.
			149.89.150.100 -> ::ffff:149.89.150.100
		- There are 2^128 IPv6 addresses.

====================================================================================================================================================================================

1/3/17

====================================================================================================================================================================================

1/5/17

AIM: Stop, Collaborate, and Listen

To use a socket
 1. Create the socket
 2. Bind it to an address and port (server)
 3. Listen and accept (server) or connect (client)
 4. Send/receive data

socket - <sys/socket.h>
- Creates a socket
- Returns a socket descriptor (int that works like a file descriptor)
- socket( domain, type, protocol );
	domain: type of address -> AF_INET or AF_INET6 (AF=Address Family)
	type: SOCK_STREAM or SOCK_DGRAM
	protocol: combination of domain and type settings; if set to 0, the OS will set to correct protocol (TCP or UDP)
  example:
	int sd = socket( AF_INET, SOCK_STREAM, 0 );

- System library calls use a struct 'addrinfo' to represent network addresses (containing information like IP address, port, protocol...)
	struct addrinfo
	  .ai_family
		AF_INET: IPv4
		AF_INET6: IPv6
		AF_UNSPEC: IPv4 or IPv6
	  .ai_socktype
		SOCK_STREAM
		SOCK_DGRAM
	  .ai_flags
		AI_PASSIVE: Automatically set to any incoming IP address
	  .ai_addr
		Pointer to a struct 'sockaddr' containing the IP address
	  .ai_addrlen
		Size of the address in bytes

getaddrinfo - <sys/types.h> <sys/socket.h> <netdb.h>
- Look up information about the desired network address and get one or more matching struct addrinfo entries
- getaddrinfo( node, service, hints, results );
	node:
	- String containing an IP address or hostname to lookup
	- If NULL, use the local machine's IP address
	service:
	- String with a port number or service name (if the service is in /etc/services/)
	hints:
	- Pointer to a struct addrinfo used to provide settings for the lookup (type of address, etc)
	results:
	- Pointer to a struct addrinfo that will be a linked list containing entries for each matching address
- getaddrinfo will allocate memory for these structs

Using getaddrinfo:
----== START OF CODE ==----
	struct addrinfo * hints, * results;
	hints = (struct addrinfo *)calloc( 1, sizeof(struct addrinfo) );
	hints -> ai_family = AF_INET;
	hints -> ai_socktype = SOCK_STREAM; // TCP socket
	hints -> ai_flags = AI_PASSIVE; // only needed on server
	getaddrinfo( NULL, "80", hints, &results ); // server sets node to NULL
	// client: getaddrinfo( "149.89.150.100", "9845", hints, &results );

	// do stuff...

	free( hints );
	freeaddrinfo( results );
----==  END OF CODE  ==----

bind (server only) - <sys/socket.h>
- Binds the socket to an address and port
- Returns 0 (success) or -1 (failure)
- bind( socket descriptor, address, address length );
	socket descriptor: return value of socket()
	address: pointer to a struct sockaddr representing the address
	address length: size of the address in bytes
  address and address length can be retrieved from getaddrinfo

Using bind:
----== START OF CODE ==----
	// create socket
	int sd = socket( AF_INET, SOCK_STREAM, 0 );

	struct addrinfo * hints, * results;
	// use getaddrinfo (not shown)

	bind( sd, results -> ai_addr, results -> ai_addrlen );
----==  END OF CODE  ==----

listen (server only) - <sys/socket.h>
- Set a socket to passively await a connection
- Needed for stream sockets
- Does not block
- listen( socket descriptor, backlog );
	socket descriptor: return value of socket (must be bound already)
	backlog: number of connections that can be queued up; depending on protocol, this may not do much


====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================



====================================================================================================================================================================================

